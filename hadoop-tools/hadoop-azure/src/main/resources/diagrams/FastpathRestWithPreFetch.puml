@startuml
'https://plantuml.com/sequence-diagram

autonumber
ReadRemoteCaller -> AbfsInputStream: readRemote()
AbfsInputStream -> ReadBufferManager: isPresentInProgressQueue(bufferBlock);
alt bufferBlockPresentInProgressQueue:
    ReadBufferManager -> ReadBufferManager: block thread until request is\nsuccess / failure
    ReadBufferManager -> AbfsInputStream: result
    AbfsInputStream -> ReadRemoteCaller: result
else bufferBlocAbsentInProgressQueue:
    AbfsInputStream -> FastpathRestHelper: operate()
    FastpathRestHelper -> RestFastpathHelperCallBack: restFastpathHelperCallBack = \nnew Callback
    RestFastpathHelperCallBack -> FastpathRestHelper: restFastpathHelperCallBack
    FastpathRestHelper -> AbfsClient: read(buffer, offsets, \nrestFastpathHelperCallBack)
    AbfsClient -> AbfsRestOperation: execute(buffer, offset, \nrestFastpathHelperCallBack)
    AbfsRestOperation -> AbfsHttpConnection: execute(buffer, offset, \nrestFastpathHelperCallBack)
    AbfsHttpConnection -> XFE_SERVER: request
    AbfsHttpConnection <-> XFE_SERVER: header_updown
    AbfsHttpConnection -> RestFastpathHelperCallBack: call()
    RestFastpathHelperCallBack -> RestFastpathHelperCallBack: check if next\nprefetch to be done
    alt prefetch to be done:
        RestFastpathHelperCallBack -> ReadBufferManager: readAheadQueue(block)
    end
    XFE_SERVER -> AbfsHttpConnection: data transfer complete
    AbfsHttpConnection -> AbfsRestOperation: result
    AbfsRestOperation -> AbfsClient: result
    AbfsClient -> FastpathRestHelper: result
    FastpathRestHelper -> AbfsInputStream: result
    AbfsInputStream -> ReadRemoteCaller: result
end


@enduml